paths:
  /api/users:
    get:
      summary: Obtiene todos los usuarios.
      tags:
        - Users
      responses:
        "200":
          description: Los usuarios fueron obtenidos correctamente desde la base de datos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/User'
        "400":
          description: No encontró el usuario en la base de datos.
        "500":
          description: Error interno del servidor, generalmente por una falla en la base de datos o un query erroneo.
    post:
      summary: Crea un nuevo usuario.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/createUser'
      responses:
        "201":
          description: El usuario fue creado con exito.

  /api/users/{uid}:
    get:
      summary: Obtiene un usuario por ID.
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: Id del usuario que se desea solicitar.
          schema:
            $type: String
      responses:
        "200":
          description: Usuario encontrado con exito.
          content:
            application/json:
              schema:
                $ref: '#components/schemas/User'

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id autogenerado por Mongo
        firstName:
          type: String
          description: Nombre del usuario
        lastName:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: Correo Electrónico del usuario, este debe ser unico
        password:
          type: String
          description: Contraseña (hasheada) del usuario
        role:
          type: String
          description: Rol del usuario
        cartId:
          type: ObjectId
          description: Id del carrito asociado al usuario
      example:
        _id: ObjectId('66899f7ae9b9a0c8147a8d57')
        firstName: Tomas
        lastName: Besso
        email: tomi.besso12@gmail.com
        password: $2b$10$47zSSlu37TKX7zK5lvPRDepuofZ5gjlbfB37Jas2jtcTI6DVCwCTu
        role: "admin"
        cartId:  ObjectId('66899c6ae9b9a0c8147a8d57')

  requestBodies:
    createUser:
      type: object
      properties:
        firstName:
          type: String
          description: Nombre del usuario
        lastName:
          type: String
          description: Apellido del usuario
        email:
          type: String
          description: Correo Electrónico del usuario, este debe ser unico
        password:
          type: String
          description: Contraseña (hasheada) del usuario
      example:
        firstName: Tomas
        lastName: Besso
        email: tomi.besso12@gmail.com
        password: 123456
